// get a large extent to test
.show table skybitz_TrailerLocations extents | sort by MaxCreatedOn asc
| project ExtentId, RowCount, MaxCreatedOn
| where RowCount > 1000000
| top 3 by MaxCreatedOn asc


// copy to new table with creationTime
.drop table TrailerLocationsTest ifexists

.set TrailerLocationsTest with(creationTime='2021-09-30 23:59:59.9990') <|
skybitz_TrailerLocations
| where extent_id() == guid(9142fc9c-d9d3-4596-92aa-2bda40839e64) //17s

.show table TrailerLocationsTest extents | sort by MaxCreatedOn asc
| project ExtentId, RowCount, MaxCreatedOn

.drop table TrailerLocationsTest ifexists

//add geofence for multiple days...
.set-or-append async TrailerLocationsTest with(creationTime='2021-09-30 23:59:59.9990') <|
let sbt=materialize(skybitz_TrailerLocations
| where extent_id() == guid(9142fc9c-d9d3-4596-92aa-2bda40839e64)
| extend covering = geo_point_to_s2cell(sbt_longitude, sbt_latitude, 8));
let polygons = materialize (CustomerPolygons | project CustomerCode, Polygon, covering);
let arrival=sbt
| lookup (polygons | mv-expand covering to typeof(string)) on covering
| project-away covering
| where geo_point_in_polygon(sbt_longitude, sbt_latitude, Polygon)
| summarize CustomerCode=make_list(CustomerCode) by sbt_assetid, sbt_messagetimestampmst,sbt_mtsn,sbt_messagetype,sbt_tetherstate,sbt_tirestate,sbt_extpwr,sbt_movementstate,sbt_cargostate,sbt_latitude,sbt_longitude,sbt_battery,sbt_quality,sbt_geoname,sbt_city,sbt_state,sbt_country,sbt_geotypename,sbt_idlestatus,sbt_idleduration,sbt_idlegap,sbt_skyfencestatus,sbt_speed,sbt_heading,sbt_transid,etl_timestampUTC,CurrentRow //,geofence
| distinct sbt_assetid, sbt_messagetimestampmst,sbt_mtsn,sbt_messagetype,sbt_tetherstate,sbt_tirestate,sbt_extpwr,sbt_movementstate,sbt_cargostate,sbt_latitude,sbt_longitude,sbt_battery,sbt_quality,sbt_geoname,sbt_city,sbt_state,sbt_country,sbt_geotypename,sbt_idlestatus,sbt_idleduration,sbt_idlegap,sbt_skyfencestatus,sbt_speed,sbt_heading,sbt_transid,etl_timestampUTC,CurrentRow, tostring(CustomerCode) //,geofence
| extend geofence='arrival';
let departure=sbt
| project-away covering
| join kind=leftanti arrival on sbt_assetid,sbt_messagetimestampmst, sbt_mtsn,sbt_messagetype,sbt_tetherstate,sbt_tirestate,sbt_extpwr,sbt_movementstate,sbt_cargostate,sbt_latitude,sbt_longitude,sbt_battery,sbt_quality,sbt_geoname,sbt_city,sbt_state,sbt_country,sbt_geotypename,sbt_idlestatus,sbt_idleduration,sbt_idlegap,sbt_skyfencestatus,sbt_speed,sbt_heading,sbt_transid,etl_timestampUTC,CurrentRow
| extend geofence='departed';
union arrival, departure
//127s

.set-or-append async TrailerLocationsTest with(creationTime='2021-10-31 23:59:59.9990') <|
let sbt=materialize(skybitz_TrailerLocations
| where extent_id() == guid(36d0be05-c38d-44e1-8cb7-8fc83a989d66)
| extend covering = geo_point_to_s2cell(sbt_longitude, sbt_latitude, 8));
let polygons = materialize (CustomerPolygons | project CustomerCode, Polygon, covering);
let arrival=sbt
| lookup (polygons | mv-expand covering to typeof(string)) on covering
| project-away covering
| where geo_point_in_polygon(sbt_longitude, sbt_latitude, Polygon)
| summarize CustomerCode=make_list(CustomerCode) by sbt_assetid, sbt_messagetimestampmst,sbt_mtsn,sbt_messagetype,sbt_tetherstate,sbt_tirestate,sbt_extpwr,sbt_movementstate,sbt_cargostate,sbt_latitude,sbt_longitude,sbt_battery,sbt_quality,sbt_geoname,sbt_city,sbt_state,sbt_country,sbt_geotypename,sbt_idlestatus,sbt_idleduration,sbt_idlegap,sbt_skyfencestatus,sbt_speed,sbt_heading,sbt_transid,etl_timestampUTC,CurrentRow //,geofence
| distinct sbt_assetid, sbt_messagetimestampmst,sbt_mtsn,sbt_messagetype,sbt_tetherstate,sbt_tirestate,sbt_extpwr,sbt_movementstate,sbt_cargostate,sbt_latitude,sbt_longitude,sbt_battery,sbt_quality,sbt_geoname,sbt_city,sbt_state,sbt_country,sbt_geotypename,sbt_idlestatus,sbt_idleduration,sbt_idlegap,sbt_skyfencestatus,sbt_speed,sbt_heading,sbt_transid,etl_timestampUTC,CurrentRow, tostring(CustomerCode) //,geofence
| extend geofence='arrival';
let departure=sbt
| project-away covering
| join kind=leftanti arrival on sbt_assetid,sbt_messagetimestampmst, sbt_mtsn,sbt_messagetype,sbt_tetherstate,sbt_tirestate,sbt_extpwr,sbt_movementstate,sbt_cargostate,sbt_latitude,sbt_longitude,sbt_battery,sbt_quality,sbt_geoname,sbt_city,sbt_state,sbt_country,sbt_geotypename,sbt_idlestatus,sbt_idleduration,sbt_idlegap,sbt_skyfencestatus,sbt_speed,sbt_heading,sbt_transid,etl_timestampUTC,CurrentRow
| extend geofence='departed';
union arrival, departure



.drop table TrailerLocationsTest ifexists


